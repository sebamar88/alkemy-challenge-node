{
  "openapi": "3.0.0",
  "info": {
    "title": "Users & Disney World Api",
    "description": "## This an api for users and Disney movies and characters",
    "version": "1.0.1",
    "contact": {
      "email": "sebamar88@gmail.com"
    }
  },

  "servers": [
    {
      "url": "https://alkemychallenge.herokuapp.com/api/v1",
      "description": "Producción"
    },
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Desarrollo"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about Users."
    },
    {
      "name": "auth",
      "description": "Operations about Authentication."
    },
    {
      "name": "add characters in movies",
      "description": "Operations on addition in the movie-character relationship."
    },
    {
      "name": "characters",
      "description": "Operations about characters."
    },
    {
      "name": "movies",
      "description": "Operations about movies."
    },
    {
      "name": "/image",
      "description": "Operations related to image uploading."
    }
  ],
  "paths": {
    "/auth/login":{
      "post": {
        "tags": ["auth"],
        "summary": "Login to API.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties":{
                  "username":{
                    "description": "Your username",
                    "type":"string",
                    "example": "example@email.com"
                  },
                  "password": {
                    "description": "You password",
                    "type": "string",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Login Success.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "object",
                  "properties":{
                    "status":{
                      "description": "Login Status",
                      "type": "string",
                      "example": "OK"
                    },
                    "data": {
                      "description": "Login",
                      "type": "object",
                      "properties":{
                        "token":{
                          "description": "Login Auth Token",
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NSwiaWF0IjoxNjI0MjI3OTc0LCJleHAiOjE2MjQzMTQzNzR9.A6RCYh17zMbjRRBq7Zc0Ku2t4mtrqAhZEgrQyo0_IvM"
                        },
                        "user": {
                          "description": "User name",
                          "type": "string",
                          "example": "Sebastián"
                        },
                        "role": {
                          "description": "User role",
                          "type": "string",
                          "example": "ADMIN_ROLE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/LoginInvalidCredentials"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/LoginInvalidRequest"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/register":{
      "post": {
        "tags": ["auth"],
        "summary": "Registering to API.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties":{
                  "username":{
                    "description": "Your username",
                    "type":"string",
                    "example": "example@email.com"
                  },
                  "password": {
                    "description": "You password",
                    "type": "string",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register Success.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "object",
                  "properties":{
                    "status":{
                      "description": "Register Status",
                      "type": "string",
                      "example": "OK"
                    },
                    "data": {
                      "description": "Register",
                      "type": "string",
                      "example": "User registered. You can log in to use the API."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RegisterInvalidRequest"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["users"],
        "summary": "Return a list of existing users",
        "description": "# Service for retrieve users by parameters with pagination\n - For the pagination, you need send offset and limit parameters.",
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/User"
                    }
                  ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new user.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/UserCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Return a list of users providing an existing id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user you want to see.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/User"
                    }
                  ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be updated.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/UserCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/User"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/movies/{idMovie}/characters/{idCharacter}":{
      "put": {
        "tags": ["add characters in movies"],
        "summary": "Update an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "idMovie",
            "in": "path",
            "description": "The id of the movie that needs to be updated.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "idCharacter",
            "in": "path",
            "description": "The id of the character that needs to be added.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Character added to movie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/Success"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/RequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/characters/image":{
      "post": {
        "tags": ["/image"],
        "summary": "Upload Character Image.",
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties":{
                  "id":{
                    "description": "Character id",
                    "type": "integer",
                    "example": 5
                  },
                  "image": {
                    "description": "Character image",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Character created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/movies/image":{
      "post": {
        "tags": ["/image"],
        "summary": "Upload Movie Image.",
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties":{
                  "id":{
                    "description": "Movie id",
                    "type": "integer",
                    "example": 5
                  },
                  "image": {
                    "description": "Movie image",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Movie image added."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/characters/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "filter[name]",
            "description": "filter characters by name.",
            "required": false,
            "Schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[age]",
            "description": "filter characters by age.",
            "required": false,
            "Schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter[weight]",
            "description": "filter characters by weight.",
            "required": false,
            "Schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["characters"],
        "summary": "Return a list of existing characters",
        "description": "# Service for retrieve characters by parameters with pagination\n - For the pagination, you need send offset and limit parameters.",
        "responses": {
          "200": {
            "description": "A JSON Array of characters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/Characters"
                    }
                  ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["characters"],
        "summary": "Create a new character.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/CharacterCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Character created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/characters/{id}": {
      "get": {
        "tags": ["characters"],
        "summary": "Return a list of characters providing an existing id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user you want to see.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of characters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/Characters"
                    }
                  ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["characters"],
        "summary": "Update an existing character by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the character that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/CharacterCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Character updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/Characters"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["characters"],
        "summary": "Delete an existing character by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the character that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Character deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/movies/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "filter[title]",
            "description": "filter movies by title.",
            "required": false,
            "Schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[calification]",
            "description": "filter movies by calification.",
            "required": false,
            "Schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter[creationDate]",
            "description": "filter movies by creationDate.",
            "required": false,
            "Schema": {
              "type": "date"
            }
          },
          {
            "in": "query",
            "name": "options[order]",
            "description": "order the query.",
            "required": false,
            "Schema": {
              "type": "order"
            }
          }
        ],
        "tags": ["movies"],
        "summary": "Return a list of existing movies",
        "description": "# Service for retrieve movies by parameters with pagination\n - For the pagination, you need send offset and limit parameters.",
        "responses": {
          "200": {
            "description": "A JSON Array of movies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/Movies"
                    }
                  ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["movies"],
        "summary": "Create a new character.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/MovieCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Character created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": ["movies"],
        "summary": "Return a list of movies providing an existing id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the movie you want to see.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of movies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf":[{
                    "$ref": "#/components/schemas/Movies"
                    }
                  ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["movies"],
        "summary": "Update an existing movie by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the movie that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf":[{
                    "$ref": "#/components/schemas/MovieCreateAndUpdate"
                    }
                  ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Movie updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/Movies"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["movies"],
        "summary": "Delete an existing movie by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the movie that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movie deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChRequestError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf":[{
                    "$ref": "#/components/schemas/ChErrorDB"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "role": {
            "description": "the user role",
            "type": "string",
            "example": "Default value: USER_ROLE"
          },
          "enable": {
            "description": "User is enabled?",
            "type": "boolean",
            "example": "true"
          },
          "id": {
            "description": "The user id.",
            "type": "integer",
            "example": 25
          },
          "name": {
            "description": "The user name.",
            "type": "string",
            "example": "Gastón"
          },
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@mail.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "$2b$10$om4Aa5l2.QdSip87EdJM"
          },
          "createdAt": {
            "description": "date of the user creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the user update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          }
        }
      },
      "Characters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "description": "The character id.",
            "type": "integer",
            "example": 25
          },
          "image": {
            "description": "The character image.",
            "type": "string",
            "format": "binary"
          },
          "name": {
            "description": "The character name.",
            "type": "string",
            "example": "Antman"
          },
          "age": {
            "description": "The character age.",
            "type": "integer",
            "example": 35
          },
          "history": {
            "description": "The character history.",
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut augue felis, euismod a sem sit."
          },
          "weight": {
            "description": "The character weight.",
            "type": "integer",
            "example": 90
          },
          "createdAt": {
            "description": "date of the character creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the character update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          }
        }
      },
      "Movies": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "description": "The movie id.",
            "type": "integer",
            "example": 25
          },
          "image": {
            "description": "The movie image.",
            "type": "string",
            "example": "https://alkemy-nodejs-challenge.s3.us-east-2.amazonaws.com/Antman.jpeg"
          },
          "title": {
            "description": "The movie title.",
            "type": "string",
            "example": "Antman"
          },
          "creationDate": {
            "description": "movie release date.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "calification": {
            "description": "The movie calification.",
            "type": "integer",
            "example": 4
          },
          "createdAt": {
            "description": "date of the movie creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the movie update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "contentTypeId": {
            "description": "The movie type of content.",
            "type": "integer",
            "example": 45
          },
          "genderTypeId": {
            "description": "The movie type of gender.",
            "type": "integer",
            "example": 4
          }
        }
      },
      "MovieCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "description": "The movie id.",
            "type": "integer",
            "example": 25
          },
          "image": {
            "description": "The movie image.",
            "type": "string",
            "example": "https://alkemy-nodejs-challenge.s3.us-east-2.amazonaws.com/Antman.jpeg"
          },
          "title": {
            "description": "The movie title.",
            "type": "string",
            "example": "Antman"
          },
          "creationDate": {
            "description": "movie release date.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "calification": {
            "description": "The movie calification.",
            "type": "integer",
            "example": 4
          },
          "createdAt": {
            "description": "date of the movie creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the movie update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "contentTypeId": {
            "description": "The movie type of content.",
            "type": "integer",
            "example": 45
          },
          "genderTypeId": {
            "description": "The movie type of gender.",
            "type": "integer",
            "example": 4
          }
        }
      },
      "CharacterCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "description": "The character id.",
            "type": "integer",
            "example": 25
          },
          "name": {
            "description": "The character name.",
            "type": "string",
            "example": "Gastón"
          },
          "age": {
            "description": "The character age.",
            "type": "integer",
            "example": 17
          },
          "history": {
            "description": "The character history.",
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut augue felis, euismod a sem sit."
          },
          "weight": {
            "description": "The character weight.",
            "type": "integer",
            "example": 90
          },
          "createdAt": {
            "description": "date of the character creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the character update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          }
        }
      },
      "UserCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The user name.",
            "type": "string",
            "example": "Gastón"
          },
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@email.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "Your password"
          }
        }
      },
      "RequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Errors: Invalid id, invalid email, etc"
          }
        }
      },
      "ErrorDB": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "500"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Search failed: description of the error"
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Success Send",
            "type": "integer",
            "example": "OK"
          }
          
        }
      },
      "ChRequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Errors"
          }
        }
      },
      "ChErrorDB": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "500"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Search failed: description of the error"
          }
        }
      },
      "LoginInvalidCredentials": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "401"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Authentication failed! Email / password does not correct. #1"
          }
        }
      },
      "RegisterInvalidRequest":{
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Error"
          },
          "details": {
            "description": "Error details",
            "type":"object",
            "properties": {
              "value": {
                "description": "Detail value",
                "type": "string",
                "example": "prueba"
              },
              "msg": {
                "description": "Detail message",
                "type": "string",
                "example": "Email is invalid"
              },
              "param": {
                "description": "Detail params",
                "type":"string",
                "example": "email"
              },
              "location": {
                "description": "Detail location",
                "type":"string",
                "example": "body"
              }
            }
          }
        }
      },
      "LoginInvalidRequest": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Error"
          },
          "details": {
            "description": "Error details",
            "type":"object",
            "properties": {
              "value": {
                "description": "Detail value",
                "type": "string",
                "example": "NotIsAEmail"
              },
              "msg": {
                "description": "Detail message",
                "type": "string",
                "example": "Email is invalid"
              },
              "param": {
                "description": "Detail params",
                "type":"string",
                "example": "email"
              },
              "location": {
                "description": "Detail location",
                "type":"string",
                "example": "body"
              }
            }
          }
        }
      }
    }
  }
}
